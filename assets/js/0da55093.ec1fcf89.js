"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[171],{3905:(e,t,i)=>{i.d(t,{Zo:()=>m,kt:()=>k});var n=i(7294);function a(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function l(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function o(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?l(Object(i),!0).forEach((function(t){a(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):l(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function r(e,t){if(null==e)return{};var i,n,a=function(e,t){if(null==e)return{};var i,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)i=l[n],t.indexOf(i)>=0||(a[i]=e[i]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)i=l[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(a[i]=e[i])}return a}var p=n.createContext({}),s=function(e){var t=n.useContext(p),i=t;return e&&(i="function"==typeof e?e(t):o(o({},t),e)),i},m=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var i=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,m=r(e,["components","mdxType","originalType","parentName"]),f=s(i),k=a,u=f["".concat(p,".").concat(k)]||f[k]||c[k]||l;return i?n.createElement(u,o(o({ref:t},m),{},{components:i})):n.createElement(u,o({ref:t},m))}));function k(e,t){var i=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=i.length,o=new Array(l);o[0]=f;var r={};for(var p in t)hasOwnProperty.call(t,p)&&(r[p]=t[p]);r.originalType=e,r.mdxType="string"==typeof e?e:a,o[1]=r;for(var s=2;s<l;s++)o[s]=i[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,i)}f.displayName="MDXCreateElement"},4787:(e,t,i)=>{i.r(t),i.d(t,{contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>r,toc:()=>p});var n=i(7462),a=(i(7294),i(3905));const l={sidebar_label:"openai_utils",title:"oai.openai_utils"},o=void 0,r={unversionedId:"reference/oai/openai_utils",id:"reference/oai/openai_utils",isDocsHomePage:!1,title:"oai.openai_utils",description:"get\\_key",source:"@site/docs/reference/oai/openai_utils.md",sourceDirName:"reference/oai",slug:"/reference/oai/openai_utils",permalink:"/autogen/docs/reference/oai/openai_utils",editUrl:"https://github.com/microsoft/autogen/edit/main/website/docs/reference/oai/openai_utils.md",tags:[],version:"current",frontMatter:{sidebar_label:"openai_utils",title:"oai.openai_utils"},sidebar:"referenceSideBar",previous:{title:"completion",permalink:"/autogen/docs/reference/oai/completion"},next:{title:"code_utils",permalink:"/autogen/docs/reference/code_utils"}},p=[{value:"get_key",id:"get_key",children:[],level:4},{value:"get_config_list",id:"get_config_list",children:[],level:4},{value:"config_list_openai_aoai",id:"config_list_openai_aoai",children:[],level:4},{value:"config_list_from_models",id:"config_list_from_models",children:[],level:4},{value:"config_list_gpt4_gpt35",id:"config_list_gpt4_gpt35",children:[],level:4},{value:"filter_config",id:"filter_config",children:[],level:4},{value:"config_list_from_json",id:"config_list_from_json",children:[],level:4}],s={toc:p};function m(e){let{components:t,...i}=e;return(0,a.kt)("wrapper",(0,n.Z)({},s,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h4",{id:"get_key"},"get","_","key"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def get_key(config)\n")),(0,a.kt)("p",null,"Get a unique identifier of a configuration."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"config")," ",(0,a.kt)("em",{parentName:"li"},"dict or list")," - A configuration.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"tuple")," - A unique identifier which can be used as a key for a dict.")),(0,a.kt)("h4",{id:"get_config_list"},"get","_","config","_","list"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def get_config_list(api_keys: List,\n                    api_bases: Optional[List] = None,\n                    api_type: Optional[str] = None,\n                    api_version: Optional[str] = None) -> List[Dict]\n")),(0,a.kt)("p",null,"Get a list of configs for openai api calls."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"api_keys")," ",(0,a.kt)("em",{parentName:"li"},"list")," - The api keys for openai api calls."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"api_bases")," ",(0,a.kt)("em",{parentName:"li"},"list, optional")," - The api bases for openai api calls."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"api_type")," ",(0,a.kt)("em",{parentName:"li"},"str, optional")," - The api type for openai api calls."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"api_version")," ",(0,a.kt)("em",{parentName:"li"},"str, optional")," - The api version for openai api calls.")),(0,a.kt)("h4",{id:"config_list_openai_aoai"},"config","_","list","_","openai","_","aoai"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'def config_list_openai_aoai(\n        key_file_path: Optional[str] = ".",\n        openai_api_key_file: Optional[str] = "key_openai.txt",\n        aoai_api_key_file: Optional[str] = "key_aoai.txt",\n        aoai_api_base_file: Optional[str] = "base_aoai.txt",\n        exclude: Optional[str] = None) -> List[Dict]\n')),(0,a.kt)("p",null,"Get a list of configs for openai + azure openai api calls."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"key_file_path")," ",(0,a.kt)("em",{parentName:"li"},"str, optional")," - The path to the key files."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"openai_api_key_file")," ",(0,a.kt)("em",{parentName:"li"},"str, optional")," - The file name of the openai api key."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"aoai_api_key_file")," ",(0,a.kt)("em",{parentName:"li"},"str, optional")," - The file name of the azure openai api key."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"aoai_api_base_file")," ",(0,a.kt)("em",{parentName:"li"},"str, optional")," - The file name of the azure openai api base."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"exclude")," ",(0,a.kt)("em",{parentName:"li"},"str, optional"),' - The api type to exclude, "openai" or "aoai".')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"list")," - A list of configs for openai api calls.")),(0,a.kt)("h4",{id:"config_list_from_models"},"config","_","list","_","from","_","models"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'def config_list_from_models(\n        key_file_path: Optional[str] = ".",\n        openai_api_key_file: Optional[str] = "key_openai.txt",\n        aoai_api_key_file: Optional[str] = "key_aoai.txt",\n        aoai_api_base_file: Optional[str] = "base_aoai.txt",\n        exclude: Optional[str] = None,\n        model_list: Optional[list] = None) -> List[Dict]\n')),(0,a.kt)("p",null,"Get a list of configs for api calls with models in the model list."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"key_file_path")," ",(0,a.kt)("em",{parentName:"li"},"str, optional")," - The path to the key files."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"openai_api_key_file")," ",(0,a.kt)("em",{parentName:"li"},"str, optional")," - The file name of the openai api key."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"aoai_api_key_file")," ",(0,a.kt)("em",{parentName:"li"},"str, optional")," - The file name of the azure openai api key."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"aoai_api_base_file")," ",(0,a.kt)("em",{parentName:"li"},"str, optional")," - The file name of the azure openai api base."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"exclude")," ",(0,a.kt)("em",{parentName:"li"},"str, optional"),' - The api type to exclude, "openai" or "aoai".'),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"model_list")," ",(0,a.kt)("em",{parentName:"li"},"list, optional")," - The model list.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"list")," - A list of configs for openai api calls.")),(0,a.kt)("h4",{id:"config_list_gpt4_gpt35"},"config","_","list","_","gpt4","_","gpt35"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'def config_list_gpt4_gpt35(\n        key_file_path: Optional[str] = ".",\n        openai_api_key_file: Optional[str] = "key_openai.txt",\n        aoai_api_key_file: Optional[str] = "key_aoai.txt",\n        aoai_api_base_file: Optional[str] = "base_aoai.txt",\n        exclude: Optional[str] = None) -> List[Dict]\n')),(0,a.kt)("p",null,"Get a list of configs for gpt-4 followed by gpt-3.5 api calls."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"key_file_path")," ",(0,a.kt)("em",{parentName:"li"},"str, optional")," - The path to the key files."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"openai_api_key_file")," ",(0,a.kt)("em",{parentName:"li"},"str, optional")," - The file name of the openai api key."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"aoai_api_key_file")," ",(0,a.kt)("em",{parentName:"li"},"str, optional")," - The file name of the azure openai api key."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"aoai_api_base_file")," ",(0,a.kt)("em",{parentName:"li"},"str, optional")," - The file name of the azure openai api base."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"exclude")," ",(0,a.kt)("em",{parentName:"li"},"str, optional"),' - The api type to exclude, "openai" or "aoai".')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"list")," - A list of configs for openai api calls.")),(0,a.kt)("h4",{id:"filter_config"},"filter","_","config"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def filter_config(config_list, filter_dict)\n")),(0,a.kt)("p",null,"Filter the config list by provider and model."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"config_list")," ",(0,a.kt)("em",{parentName:"li"},"list")," - The config list."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"filter_dict")," ",(0,a.kt)("em",{parentName:"li"},"dict, optional")," - The filter dict with keys corresponding to a field in each config,\nand values corresponding to lists of acceptable values for each key.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"list")," - The filtered config list.")),(0,a.kt)("h4",{id:"config_list_from_json"},"config","_","list","_","from","_","json"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'def config_list_from_json(\n    env_or_file: str,\n    file_location: Optional[str] = "",\n    filter_dict: Optional[Dict[str, Union[List[Union[str, None]],\n                                          Set[Union[str, None]]]]] = None\n) -> List[Dict]\n')),(0,a.kt)("p",null,"Get a list of configs from a json parsed from an env variable or a file."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"env_or_file")," ",(0,a.kt)("em",{parentName:"li"},"str")," - The env variable name or file name."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"file_location")," ",(0,a.kt)("em",{parentName:"li"},"str, optional")," - The file location."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"filter_dict")," ",(0,a.kt)("em",{parentName:"li"},"dict, optional")," - The filter dict with keys corresponding to a field in each config,\nand values corresponding to lists of acceptable values for each key.\ne.g.,")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'filter_dict = {\n    "api_type": ["open_ai", None],  # None means a missing key is acceptable\n    "model": ["gpt-3.5-turbo", "gpt-4"],\n}\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"list")," - A list of configs for openai api calls.")))}m.isMDXComponent=!0}}]);